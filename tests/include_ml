#use "topfind";;
#require "result,vector";;
#require "sandbox";;
open Core_ops ;;

implicit module F = FilterIterator(IntVectorIterator) ;;
implicit module M = MapIterator (TYPEint)(TYPEint)(F) ;;
implicit module IS = IteratorSum(M)(Ops_int);;
implicit module RS = IteratorSum(RangeIterator)(Ops_int) ;;
implicit module RCV = IteratorCollectVector(RangeIterator)(Ops_int) ;;
implicit module RCL = IteratorCollectList(RangeIterator)(Ops_int) ;;

let v = make [1;2;3;4;5;6];;
let ii = iter v;;
(*
let ii2 = filter (ii : F.I.t)  (fun x -> 0 = x mod 2);;
 *)
let ii2 = F.make ii (fun x -> 0 = x mod 2) ;;
let m = map ii2 (fun x -> x * 2 );;
sum m ;;

let r = Range.make 0 10 ;;
let ii = iter r ;;
sum ii ;;

let r = Range.make 0 10 ;;
let ii = iter r ;;
let v : int Vector.t = collect ii ;;
Vector.to_list v ;;


let r = Range.make 0 10 ;;
let ii = iter {Range} r ;;
let (l : int list) = collect ii ;;

(*
;;; Local Variables: ***
;;; mode:tuareg ***
;;; End: ***

*)
